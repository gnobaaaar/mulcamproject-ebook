{"ast":null,"code":"var _jsxFileName = \"/Users/dengseum/repo/multiicampus21_project/front/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { Link, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport { useEffect, useState } from 'react';\nimport Header from './components/Header/Header';\nimport LoginModal from './components/modals/LoginModal';\nimport jwtDecode from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [modal, setModal] = useState(false);\n  const [user, setUser] = useState([]);\n  let [isAuthenticated, setisAuthenticated] = useState(!!localStorage.getItem('token'));\n\n  const userHasAuthenticated = (authenticated, username, token) => {\n    setisAuthenticated(authenticated);\n    setUser(username);\n    localStorage.setItem('token', token);\n  }; // 회원가입이나 로그인이 성공했을 때 토큰을 저장\n\n\n  const handleLogout = () => {\n    setisAuthenticated(false);\n    setUser('');\n    localStorage.removeItem('token');\n    setModal(false);\n  }; // 로그아웃\n  // 회원가입이나 로그인이 성공했을 때 modal을 변경해 로그인 버튼을 없애고 글쓰기 버튼과 정보버튼을 나오게하는 setModal\n  // useEffect의 두번째 인자는 모든 렌더링 후 두번째 인자가 변경될때에만 실행되라는 내용\n\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      setModal(true);\n    } else {\n      setModal(false);\n    }\n  }, [isAuthenticated]);\n  useEffect(() => {\n    // 토큰(access token)이 이미 존재하는 상황이라면 서버에 GET /validate 요청하여 해당 access token이 유효한지 확인\n    if (isAuthenticated) {\n      // 현재 JWT 토큰 값이 타당한지 GET /validate 요청을 통해 확인하고\n      // 상태 코드가 200이라면 현재 GET /user/current 요청을 통해 user정보를 받아옴\n      fetch('http://choi1994.iptime.org:8000/validate/', {\n        headers: {\n          Authorization: `JWT ${localStorage.getItem('token')}`\n        }\n      }).then(res => {\n        fetch('http://choi1994.iptime.org:8000/user/current/', {\n          headers: {\n            Authorization: `JWT ${localStorage.getItem('token')}`\n          }\n        }).then(res => res.json()).then(json => {\n          // 현재 유저 정보 받아왔다면, 로그인 상태로 state 업데이트 하고\n          if (json.username) {\n            setUser(json.username);\n          } else {\n            // 유저가 undefined라면 로그인버튼이 나오도록 modal을 false로 항상 맞춰줌\n            setModal(false);\n            setisAuthenticated(false);\n          } // Refresh Token 발급 받아 token의 만료 시간 연장\n\n\n          fetch('http://choi1994.iptime.org:8000/refresh/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              token: localStorage.getItem('token')\n            })\n          }).then(res => res.json()).then(json => {\n            userHasAuthenticated(true, json.user.username, json.token);\n          }).catch(error => {\n            console.log(error);\n          });\n        }).catch(error => {\n          handleLogout();\n          console.log(error);\n        });\n      }).catch(error => {\n        handleLogout();\n        console.log(error);\n      });\n    }\n  }, [isAuthenticated]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      height: '150vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Header, {\n        modal: modal,\n        handleLogout: handleLogout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        component: Home\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/login\",\n        children: /*#__PURE__*/_jsxDEV(LoginModal, {\n          setModal: setModal,\n          userHasAuthenticated: userHasAuthenticated\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Maza6BUpVdLclIaHhhWDyvO9cqw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/dengseum/repo/multiicampus21_project/front/src/App.js"],"names":["Link","Route","Home","useEffect","useState","Header","LoginModal","jwtDecode","App","modal","setModal","user","setUser","isAuthenticated","setisAuthenticated","localStorage","getItem","userHasAuthenticated","authenticated","username","token","setItem","handleLogout","removeItem","fetch","headers","Authorization","then","res","json","method","body","JSON","stringify","catch","error","console","log","height"],"mappings":"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","sourcesContent":["import './App.css';\nimport {Link, Route} from 'react-router-dom';\nimport Home from './components/Home';\nimport {useEffect, useState} from 'react';\nimport Header from './components/Header/Header';\nimport LoginModal from './components/modals/LoginModal';\nimport jwtDecode from 'jwt-decode';\n\nfunction App() {\n  const [modal, setModal] = useState(false);\n  const [user, setUser] = useState([]);\n\n  let [isAuthenticated, setisAuthenticated] = useState(!!localStorage.getItem('token'));\n\n  const userHasAuthenticated = (authenticated, username, token) => {\n    setisAuthenticated(authenticated);\n    setUser(username);\n    localStorage.setItem('token', token);\n  };// 회원가입이나 로그인이 성공했을 때 토큰을 저장\n\n  const handleLogout = () => {\n    setisAuthenticated(false);\n    setUser('');\n    localStorage.removeItem('token');\n    setModal(false);\n  };// 로그아웃\n\n  // 회원가입이나 로그인이 성공했을 때 modal을 변경해 로그인 버튼을 없애고 글쓰기 버튼과 정보버튼을 나오게하는 setModal\n  // useEffect의 두번째 인자는 모든 렌더링 후 두번째 인자가 변경될때에만 실행되라는 내용\n  useEffect(()=>{\n    if (isAuthenticated) {\n      setModal(true);\n    } else {\n      setModal(false);\n    }\n  }, [isAuthenticated]);\n\n  useEffect(() => {\n    // 토큰(access token)이 이미 존재하는 상황이라면 서버에 GET /validate 요청하여 해당 access token이 유효한지 확인\n    if (isAuthenticated) {\n      // 현재 JWT 토큰 값이 타당한지 GET /validate 요청을 통해 확인하고\n      // 상태 코드가 200이라면 현재 GET /user/current 요청을 통해 user정보를 받아옴\n      fetch('http://choi1994.iptime.org:8000/validate/', {\n        headers: {\n          Authorization: `JWT ${localStorage.getItem('token')}`\n        }\n      })\n        .then(res => {\n          fetch('http://choi1994.iptime.org:8000/user/current/', {\n            headers: {\n              Authorization: `JWT ${localStorage.getItem('token')}`\n            }\n          })\n            .then(res => res.json())\n            .then(json => {\n              // 현재 유저 정보 받아왔다면, 로그인 상태로 state 업데이트 하고\n              if (json.username) {\n                setUser(json.username);\n              } else {\n                // 유저가 undefined라면 로그인버튼이 나오도록 modal을 false로 항상 맞춰줌\n                setModal(false);\n                setisAuthenticated(false);\n              }\n              // Refresh Token 발급 받아 token의 만료 시간 연장\n              fetch('http://choi1994.iptime.org:8000/refresh/', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  token: localStorage.getItem('token')\n                })\n              })\n                .then(res => res.json())\n                .then((json)=>{\n                  userHasAuthenticated(true, json.user.username, json.token);\n                })\n                .catch(error => {\n                  console.log(error);\n                });\n            })\n            .catch(error => {\n              handleLogout();\n              console.log(error);\n            });\n        })\n        .catch(error => {\n          handleLogout();\n          console.log(error);\n        });\n    }\n  }, [isAuthenticated]);\n\n  return (\n    <div className=\"App\" style={{height: '150vh'}}>\n        <div>\n            <Header modal={modal} handleLogout={handleLogout}/>\n        </div>\n        <div>\n            <Route path=\"/\" component={Home} />\n            <Route exact path=\"/login\">\n            <LoginModal setModal={setModal} userHasAuthenticated={userHasAuthenticated} />\n            </Route>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}